package com.Avataryug.client.Handler

import android.util.Log
import com.Avataryug.client.Apis.UserAccountManagementApi
import com.Avataryug.client.Infrastructure.ClientException
import com.Avataryug.client.Infrastructure.ServerException
import com.Avataryug.client.Models.AddGenericServiceIDRequest
import com.Avataryug.client.Models.AddGenericServiceIDResult
import com.Avataryug.client.Models.ChangePasswordRequest
import com.Avataryug.client.Models.ChangePasswordResult
import com.Avataryug.client.Models.DeleteUserResult
import com.Avataryug.client.Models.GetUserAccountInfoResult
import com.Avataryug.client.Models.GetUserProfileResult
import com.Avataryug.client.Models.LinkAndroidDeviceIDRequest
import com.Avataryug.client.Models.LinkAndroidDeviceIDResult
import com.Avataryug.client.Models.LinkAppleRequest
import com.Avataryug.client.Models.LinkAppleResult
import com.Avataryug.client.Models.LinkCustomIDRequest
import com.Avataryug.client.Models.LinkCustomIDResult
import com.Avataryug.client.Models.LinkFacebookAccountRequest
import com.Avataryug.client.Models.LinkFacebookAccountResult
import com.Avataryug.client.Models.LinkGoogleAccountRequest
import com.Avataryug.client.Models.LinkGoogleAccountResult
import com.Avataryug.client.Models.LinkIOSDeviceIDRequest
import com.Avataryug.client.Models.LinkIOSDeviceIDResult
import com.Avataryug.client.Models.RemoveGenericServiceIDResult
import com.Avataryug.client.Models.UnlinkAndroidDeviceIDResult
import com.Avataryug.client.Models.UnlinkAppleResult
import com.Avataryug.client.Models.UnlinkCustomIDResult
import com.Avataryug.client.Models.UnlinkFacebookAccountResult
import com.Avataryug.client.Models.UnlinkGoogleAccountResult
import com.Avataryug.client.Models.UnlinkIOSDeviceIDResult
import com.Avataryug.client.Models.UpdateDefaultAvatarIDRequest
import com.Avataryug.client.Models.UpdateDefaultAvatarIDResult
import com.Avataryug.client.Models.UpdateUserDemographicsRequest
import com.Avataryug.client.Models.UpdateUserDemographicsResult
import com.Avataryug.client.Models.UpdateUserProjectDisplayNameRequest
import com.Avataryug.client.Models.UpdateUserProjectDisplayNameResult
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.launch

/**
 * The "UserAccountManagementHandle" class manages user account-related operations through the use of the "Base" class.
 * It provides a variety of methods for tasks such as
 * changing passwords, deleting user accounts, updating user demographics, verifying users with email, and more.
 * These methods utilize the "baseApiCall" instance to make API calls and handle responses and errors through callbacks.
 */
class UserAccountManagementHandler (private val apiBase: Base)
{
    /**
     * Links a custom ID to the user's account.
     * @param listener
     */
    fun linkCustomID(listener: OnLinkCustomIDResultListener)
    {
        apiBase.callApi(object : Base.OnApiResultListener {
            override fun onResult(response: Any)
            {
                if (response is LinkCustomIDResult)
                {
                    listener.onLinkCustomIDResult(response)
                }
                else
                {
                    listener.onError(Exception("API response is null"))
                }
            }
            override fun onError(error: Exception)
            {
                listener.onError(error)
            }
        })
    }

    /**
     * Define the listener interface for the LinkCustomID method.
     */
    interface OnLinkCustomIDResultListener
    {
        fun onLinkCustomIDResult(result: LinkCustomIDResult)
        fun onError(error: Exception)
    }

    /**
     * Links the custom identifier, generated by the Project, to the user's Avataryug account
     */
    class LinkCustomID(private val customID: String, private val forceLink: Boolean) : Base
    {
        override fun callApi(listener: Base.OnApiResultListener)
        {
            GlobalScope.launch(Dispatchers.IO) {
                try {
                    val apiInstance = UserAccountManagementApi()
                    val linkCustomIDRequest = LinkCustomIDRequest( customID = customID, forceLink = forceLink)
                    val result: LinkCustomIDResult =
                        apiInstance.linkCustomID(linkCustomIDRequest)
                    listener.onResult(result)
                } catch (e: ClientException) {
                    Log.e("Links Custom ID CLIENT EXCEPTION", e.message ?: "", e)
                    listener.onError(e)
                } catch (e: ServerException) {
                    Log.e("Links Custom ID SERVER EXCEPTION", e.message ?: "", e)
                    listener.onError(e)
                } catch (e: Exception) {
                    Log.e("Links Custom ID EXCEPTION", e.message ?: "", e)
                    listener.onError(e)
                }
            }
        }
    }

    /**
     * Unlinks a custom ID from the user's account.
     * @param listener
     */
    fun unlinkCustomID(listener: OnUnlinkCustomIDListener)
    {
        apiBase.callApi(object : Base.OnApiResultListener {
            override fun onResult(response: Any) {
                if (response is UnlinkCustomIDResult) {
                    listener.onUnlinkCustomIDResult(response)
                } else {
                    listener.onUnlinkCustomIDError(Exception("Invalid response type"))
                }
            }
            override fun onError(error: Exception) {
                listener.onUnlinkCustomIDError(error)
            }
        })
    }

    /**
     * Define the listener interface for the UnlinkCustomID method.
     */
    interface OnUnlinkCustomIDListener
    {
        fun onUnlinkCustomIDResult(result: UnlinkCustomIDResult)
        fun onUnlinkCustomIDError(error: Exception)
    }

    /**
     * Unlinks the related custom identifier from the user's Avataryug account
     */
    class UnlinkCustomID : Base
    {
        override fun callApi(listener: Base.OnApiResultListener)
        {
            GlobalScope.launch(Dispatchers.IO) {
                try {
                    val apiInstance = UserAccountManagementApi()
                    val result: UnlinkCustomIDResult = apiInstance.unlinkCustomID()
                    listener.onResult(result)
                } catch (e: ClientException) {
                    Log.e("Unlinks Custom ID CLIENT EXCEPTION", e.message ?: "", e)
                    listener.onError(e)
                } catch (e: ServerException) {
                    Log.e("Unlinks Custom ID SERVER EXCEPTION", e.message ?: "", e)
                    listener.onError(e)
                } catch (e: Exception) {
                    Log.e("Unlinks Custom ID EXCEPTION", e.message ?: "", e)
                    listener.onError(e)
                }
            }
        }
    }

    /**
     * Links an Android device ID to the user's account.
     * @param listener
     */
    fun linkAndroidDeviceID(listener: LinkAndroidDeviceIDListener)
    {
        apiBase.callApi(object : Base.OnApiResultListener {
            override fun onResult(response: Any) {
                if (response is LinkAndroidDeviceIDResult) {
                    listener.onLinkAndroidDeviceIDResult(response)
                } else {
                    listener.onLinkAndroidDeviceIDError(Exception("Invalid response type"))
                }
            }

            override fun onError(error: Exception) {
                listener.onLinkAndroidDeviceIDError(error)
            }
        })
    }

    /**
     * Define the listener interface for the LinkAndroidDeviceID method.
     */
    interface LinkAndroidDeviceIDListener
    {
        fun onLinkAndroidDeviceIDResult(result: LinkAndroidDeviceIDResult)
        fun onLinkAndroidDeviceIDError(error: Exception)
    }

    /**
     * Links the Android device identifier to the user's Avataryug account
     */
    class LinkAndroidDeviceID(private val androidDeviceID: String, private val forceLink: Boolean) : Base
    {
        override fun callApi(listener: Base.OnApiResultListener)
        {

            GlobalScope.launch(Dispatchers.IO) {
                try {
                    val apiInstance = UserAccountManagementApi()
                    val linkAndroidDeviceIDRequest = LinkAndroidDeviceIDRequest(
                        androidDeviceID = androidDeviceID,
                        forceLink = forceLink
                    )
                    val result: LinkAndroidDeviceIDResult = apiInstance.linkAndroidDeviceID(linkAndroidDeviceIDRequest)
                    listener.onResult(result)
                } catch (e: ClientException) {
                    Log.e("Links the Android device ID CLIENT EXCEPTION", e.message ?: "", e)
                    listener.onError(e)
                } catch (e: ServerException) {
                    Log.e("Links the Android device ID SERVER EXCEPTION", e.message ?: "", e)
                    listener.onError(e)
                } catch (e: Exception) {
                    Log.e("Links the Android device ID EXCEPTION", e.message ?: "", e)
                    listener.onError(e)
                }
            }


        }
    }

    /**
     * Unlinks an Android device ID from the user's account.
     * @param listener
     */
    fun unlinkAndroidDeviceID(listener: UnlinkAndroidDeviceIDListener)
    {
        apiBase.callApi(object : Base.OnApiResultListener
        {
            override fun onResult(response: Any) {
                if (response is UnlinkAndroidDeviceIDResult) {
                    listener.onUnlinkAndroidDeviceIDResult(response)
                } else {
                    listener.onUnlinkAndroidDeviceIDError(Exception("Invalid response type"))
                }
            }
            override fun onError(error: Exception) {
                listener.onUnlinkAndroidDeviceIDError(error)
            }
        })
    }

    /**
     * Define the listener interface for the UnlinkAndroidDeviceID method.
     */
    interface UnlinkAndroidDeviceIDListener
    {
        fun onUnlinkAndroidDeviceIDResult(result: UnlinkAndroidDeviceIDResult)
        fun onUnlinkAndroidDeviceIDError(error: Exception)
    }

    /**
     * Unlinks the related Android device identifier from the user's Avataryug account.
     */
    class UnlinkAndroidDeviceID : Base
    {
        override fun callApi(listener: Base.OnApiResultListener)
        {
            GlobalScope.launch(Dispatchers.IO)
            {
                try {
                    val apiInstance = UserAccountManagementApi()
                    val result: UnlinkAndroidDeviceIDResult = apiInstance.unlinkAndroidDeviceID()
                    listener.onResult(result)
                } catch (e: ClientException) {
                    Log.e("Unlinks  the Android device ID CLIENT EXCEPTION", e.message ?: "", e)
                    listener.onError(e)
                } catch (e: ServerException) {
                    Log.e("Unlinks the Android device ID SERVER EXCEPTION", e.message ?: "", e)
                    listener.onError(e)
                } catch (e: Exception) {
                    Log.e("Unlinks the Android device ID EXCEPTION", e.message ?: "", e)
                    listener.onError(e)
                }
            }
        }
    }

    /**
     * Links an Apple account to the user's account.
     * @param listener
     */
    fun linkApple(listener: LinkAppleListener)
    {
        apiBase.callApi(object : Base.OnApiResultListener
        {
            override fun onResult(response: Any) {
                if (response is LinkAppleResult) {
                    listener.onLinkAppleResult(response)
                } else {
                    listener.onLinkAppleError(Exception("Invalid response type"))
                }
            }
            override fun onError(error: Exception) {
                listener.onLinkAppleError(error)
            }
        })
    }

    /**
     * Define the listener interface for the linkApple method.
     */
    interface LinkAppleListener
    {
        fun onLinkAppleResult(result: LinkAppleResult)
        fun onLinkAppleError(error: Exception)
    }

    /**
     * Links the Apple account associated with the token to the user's Avataryug account.
     */
    class LinkApple(private val appleID: String, private val forceLink: Boolean, private val identityToken: String) : Base
    {
        override fun callApi(listener: Base.OnApiResultListener)
        {
            GlobalScope.launch(Dispatchers.IO)
            {
                try {
                    val linkAppleRequest = LinkAppleRequest(
                        appleID = appleID,
                        forceLink = forceLink,
                        identityToken = identityToken
                    )
                    val apiInstance = UserAccountManagementApi()
                    val result: LinkAppleResult = apiInstance.linkApple(linkAppleRequest)
                    listener.onResult(result)
                } catch (e: ClientException) {
                    Log.e("Links the Apple account CLIENT EXCEPTION", e.message ?: "", e)
                    listener.onError(e)
                } catch (e: ServerException) {
                    Log.e("Links the Apple account SERVER EXCEPTION", e.message ?: "", e)
                    listener.onError(e)
                } catch (e: Exception) {
                    Log.e("Links the Apple account EXCEPTION", e.message ?: "", e)
                    listener.onError(e)
                }
            }

        }
    }

    /**
     * Unlinks an Apple account from the user's account.
     * @param listener
     */
    fun unlinkApple(listener: UnlinkAppleResultListener)
    {
        apiBase.callApi(object : Base.OnApiResultListener {
            override fun onResult(response: Any) {
                if (response is UnlinkAppleResult) {
                    listener.onUnlinkAppleResult(response)
                } else {
                    listener.onUnlinkAppleError(Exception("Invalid response type"))
                }
            }
            override fun onError(error: Exception) {
                listener.onUnlinkAppleError(error)
            }
        })
    }

    /**
     * Define the listener interface for the unlinkApple method.
     */
    interface UnlinkAppleResultListener
    {
        fun onUnlinkAppleResult(result: UnlinkAppleResult)
        fun onUnlinkAppleError(error: Exception)
    }

/**
 * Unlinks the related Apple account from the user's Avataryug accou
 */
    class UnlinkApple : Base
    {
        override fun callApi(listener: Base.OnApiResultListener)
        {
            GlobalScope.launch(Dispatchers.IO)
            {
                try {

                    val apiInstance = UserAccountManagementApi()
                    val result: UnlinkAppleResult = apiInstance.unlinkApple()
                    listener.onResult(result)
                } catch (e: ClientException) {
                    Log.e("Unlinks the Apple account CLIENT EXCEPTION", e.message ?: "", e)
                    listener.onError(e)
                } catch (e: ServerException) {
                    Log.e("Unlinks the Apple account SERVER EXCEPTION", e.message ?: "", e)
                    listener.onError(e)
                } catch (e: Exception) {
                    Log.e("Unlinks the Apple account EXCEPTION", e.message ?: "", e)
                    listener.onError(e)
                }
            }
        }
    }

    /**
     * Links an iOS device ID to the user's account.
     * @param listener
     */
    fun linkIOSDeviceID(listener: LinkIOSDeviceIDListener)
    {
        apiBase.callApi(object : Base.OnApiResultListener {
            override fun onResult(response: Any) {
                if (response is LinkIOSDeviceIDResult) {
                    listener.onLinkIOSDeviceIDResult(response)
                } else {
                    listener.onLinkIOSDeviceIDError(Exception("Invalid response type"))
                }
            }

            override fun onError(error: Exception) {
                listener.onLinkIOSDeviceIDError(error)
            }
        })
    }

    /**
     * Define the listener interface for the linkIOSDeviceID method.
     */
    interface LinkIOSDeviceIDListener
    {
        fun onLinkIOSDeviceIDResult(result: LinkIOSDeviceIDResult)
        fun onLinkIOSDeviceIDError(error: Exception)
    }

    /**
     * Links the vendor-specific iOS device identifier to the user's Avataryug account.
     */
    class LinkIOSDeviceID(private val deviceID: String, private val forceLink: Boolean) : Base
    {
        override fun callApi(listener: Base.OnApiResultListener) {

            GlobalScope.launch(Dispatchers.IO)
            {
                try {
                    val linkIOSDeviceIDRequest = LinkIOSDeviceIDRequest( deviceID = deviceID, forceLink = forceLink)
                    val apiInstance = UserAccountManagementApi()
                    val result: LinkIOSDeviceIDResult = apiInstance.linkIOSDeviceID(linkIOSDeviceIDRequest)
                    listener.onResult(result)
                } catch (e: ClientException) {
                    Log.e("Links the iOS device account CLIENT EXCEPTION", e.message ?: "", e)
                    listener.onError(e)
                } catch (e: ServerException) {
                    Log.e("Links the iOS device account SERVER EXCEPTION", e.message ?: "", e)
                    listener.onError(e)
                } catch (e: Exception) {
                    Log.e("Links the iOS device account EXCEPTION", e.message ?: "", e)
                    listener.onError(e)
                }
            }

        }
    }

    /**
     * Unlinks an iOS device ID from the user's account.
     * @param listener
     */
    fun unlinkIOSDeviceID(listener: UnlinkIOSDeviceIDListener)
    {
        apiBase.callApi(object : Base.OnApiResultListener {
            override fun onResult(response: Any) {
                if (response is UnlinkIOSDeviceIDResult) {
                    listener.onUnlinkIOSDeviceIDResult(response)
                } else {
                    listener.onUnlinkIOSDeviceIDError(Exception("Invalid response type"))
                }
            }

            override fun onError(error: Exception) {
                listener.onUnlinkIOSDeviceIDError(error)
            }
        })
    }

    /**
     * Define the listener interface for the unlinkIOSDeviceID method.
     */
    interface UnlinkIOSDeviceIDListener
    {
        fun onUnlinkIOSDeviceIDResult(result: UnlinkIOSDeviceIDResult)
        fun onUnlinkIOSDeviceIDError(error: Exception)
    }

    /**
     * Unlinks the related iOS device identifier from the user's Avataryug account.
     */
    class UnlinkIOSDeviceID : Base
    {
        override fun callApi(listener: Base.OnApiResultListener)
        {
            GlobalScope.launch(Dispatchers.IO)
            {
                try {

                    val apiInstance = UserAccountManagementApi()
                    val result: UnlinkIOSDeviceIDResult = apiInstance.unlinkIOSDeviceID()
                    listener.onResult(result)
                } catch (e: ClientException) {
                    Log.e("Unlinks the iOS device CLIENT EXCEPTION", e.message ?: "", e)
                    listener.onError(e)
                } catch (e: ServerException) {
                    Log.e("Unlinks the iOS device SERVER EXCEPTION", e.message ?: "", e)
                    listener.onError(e)
                } catch (e: Exception) {
                    Log.e("Unlinks the iOS device EXCEPTION", e.message ?: "", e)
                    listener.onError(e)
                }
            }
        }
    }

    /**
     * Links a Google account to the user's account.
     * @param listener
     */
    fun linkGoogleAccount(listener: LinkGoogleAccountListener)
    {
        apiBase.callApi(object : Base.OnApiResultListener {
            override fun onResult(response: Any) {
                if (response is LinkGoogleAccountResult) {
                    listener.onLinkGoogleAccountResult(response)
                } else {
                    listener.onLinkGoogleAccountError(Exception("Invalid response type"))
                }
            }

            override fun onError(error: Exception) {
                listener.onLinkGoogleAccountError(error)
            }
        })
    }

    /**
     * Define the listener interface for the linkGoogleAccount method.
     */
    interface LinkGoogleAccountListener
    {
        fun onLinkGoogleAccountResult(result: LinkGoogleAccountResult)
        fun onLinkGoogleAccountError(error: Exception)
    }

    /**
     * Links the currently signed-in user account to their Google account, using their Google account credentials.
     */
    class LinkGoogleAccount(private val googleID: String, private val forceLink: Boolean, private val googleServerAuthCode: String) : Base
    {
        override fun callApi(listener: Base.OnApiResultListener) {

            GlobalScope.launch(Dispatchers.IO)
            {
                try {
                    val request = LinkGoogleAccountRequest(
                        googleID = googleID,
                        forceLink = forceLink,
                        googleServerAuthCode = googleServerAuthCode
                    )
                    val apiInstance = UserAccountManagementApi()
                    val result: LinkGoogleAccountResult = apiInstance.linkGoogleAccount(request)
                    listener.onResult(result)
                }
                catch (e: ClientException)
                {
                    Log.e("links the Google account CLIENT EXCEPTION", e.message ?: "", e)
                    listener.onError(e)
                }
                catch (e: ServerException)
                {
                    Log.e("links the Google account SERVER EXCEPTION", e.message ?: "", e)
                    listener.onError(e)
                }
                catch (e: Exception)
                {
                    Log.e("links the Google account EXCEPTION", e.message ?: "", e)
                    listener.onError(e)
                }
            }

        }
    }

    /**
     * Unlinks a Google account from the user's account.
     * @param listener
     */
    fun unlinkGoogleAccount(listener: OnUnlinkGoogleAccountResultListener)
    {
        apiBase.callApi(object : Base.OnApiResultListener {
            override fun onResult(response: Any)
            {
                if (response is UnlinkGoogleAccountResult)
                {
                    listener.onUnlinkGoogleAccountResult(response)
                } else {
                    listener.onUnlinkGoogleAccountError(Exception("Invalid response type"))
                }
            }

            override fun onError(error: Exception)
            {
                listener.onUnlinkGoogleAccountError(error)
            }
        })
    }

    /**
     * Define the listener interface for the unlinkGoogleAccount method.
     */
    interface OnUnlinkGoogleAccountResultListener
    {
        fun onUnlinkGoogleAccountResult(result: UnlinkGoogleAccountResult)
        fun onUnlinkGoogleAccountError(error: Exception)
    }

    /**
     * Unlinks the related Google account from the user's Avataryug accoun
     */
    class UnlinkGoogleAccount : Base
    {
        override fun callApi(listener: Base.OnApiResultListener) {
            GlobalScope.launch(Dispatchers.IO)
            {
                try
                {
                    val apiInstance = UserAccountManagementApi()
                    val result: UnlinkGoogleAccountResult = apiInstance.unlinkGoogleAccount()
                    listener.onResult(result)
                }
                catch (e: ClientException)
                {
                    Log.e("Unlinks the Google account CLIENT EXCEPTION", e.message ?: "", e)
                    listener.onError(e)
                }
                catch (e: ServerException)
                {
                    Log.e("Unlinks the Google account SERVER EXCEPTION", e.message ?: "", e)
                    listener.onError(e)
                }
                catch (e: Exception)
                {
                    Log.e("Unlinks the Google account EXCEPTION", e.message ?: "", e)
                    listener.onError(e)
                }
            }
        }
    }

    /**
     * Links a Facebook account to the user's account.
     * @param listener
     */
    fun linkFacebookAccount(listener: OnLinkFacebookAccountListener)
    {
        apiBase.callApi(object : Base.OnApiResultListener
        {
            override fun onResult(response: Any)
            {
                if (response is LinkFacebookAccountResult)
                {
                    listener.onLinkFacebookAccountResult(response)
                } else {
                    listener.onLinkFacebookAccountError(Exception("Invalid response type"))
                }
            }
            override fun onError(error: Exception)
            {
                listener.onLinkFacebookAccountError(error)
            }
        })
    }

    /**
     * Define the listener interface for the linkFacebookAccount method.
     */
    interface OnLinkFacebookAccountListener
    {
        fun onLinkFacebookAccountResult(result: LinkFacebookAccountResult)
        fun onLinkFacebookAccountError(error: Exception)
    }

    /**
     * Links the Facebook account associated with the provided Facebook access token to the user's Avataryug account
     */
    class LinkFacebookAccount(private val accessToken: String, private val forceLink: Boolean, private val facebookID: String) : Base
    {
        override fun callApi(listener: Base.OnApiResultListener) {
            GlobalScope.launch(Dispatchers.IO)
            {
                try {
                    val request = LinkFacebookAccountRequest(accessToken = accessToken,forceLink = forceLink,facebookID = facebookID)
                    val apiInstance = UserAccountManagementApi()
                    val result: LinkFacebookAccountResult = apiInstance.linkFacebookAccount(request)
                    listener.onResult(result)
                }
                catch (e: ClientException)
                {
                    Log.e("links the Facebook account CLIENT EXCEPTION", e.message ?: "", e)
                    listener.onError(e)
                }
                catch (e: ServerException)
                {
                    Log.e("links the Facebook account SERVER EXCEPTION", e.message ?: "", e)
                    listener.onError(e)
                }
                catch (e: Exception)
                {
                    Log.e("links the Facebook account EXCEPTION", e.message ?: "", e)
                    listener.onError(e)
                }
            }
        }
    }

    /**
     * Unlinks a Facebook account from the user's account.
     * @param listener
     */
    fun unlinkFacebookAccount(listener: OnUnlinkFacebookAccountListener)
    {
        apiBase.callApi(object : Base.OnApiResultListener
        {
            override fun onResult(response: Any)
            {
                if (response is UnlinkFacebookAccountResult)
                {
                    listener.onUnlinkFacebookAccountResult(response)
                } else {
                    listener.onUnlinkFacebookAccountError(Exception("Invalid response type"))
                }
            }
            override fun onError(error: Exception)
            {
                listener.onUnlinkFacebookAccountError(error)
            }
        })
    }

    /**
     * Define the listener interface for the unlinkFacebookAccount method.
     */
    interface OnUnlinkFacebookAccountListener
    {
        fun onUnlinkFacebookAccountResult(result: UnlinkFacebookAccountResult)
        fun onUnlinkFacebookAccountError(error: Exception)
    }

    /**
     * Unlinks the related Facebook account from the user's Avataryug account.
     */
    class UnlinkFacebookAccount : Base
    {
        override fun callApi(listener: Base.OnApiResultListener) {
            GlobalScope.launch(Dispatchers.IO)
            {
                try
                {
                    val apiInstance = UserAccountManagementApi()
                    val result: UnlinkFacebookAccountResult = apiInstance.unlinkFacebookAccount()
                    listener.onResult(result)
                }
                catch (e: ClientException)
                {
                    Log.e("Unlinks the Facebook account CLIENT EXCEPTION", e.message ?: "", e)
                    listener.onError(e)
                }
                catch (e: ServerException)
                {
                    Log.e("Unlinks the Facebook account SERVER EXCEPTION", e.message ?: "", e)
                    listener.onError(e)
                }
                catch (e: Exception)
                {
                    Log.e("Unlinks the Facebook account EXCEPTION", e.message ?: "", e)
                    listener.onError(e)
                }
            }
        }
    }

    /**
     * Adds the specified generic service identifier to the user's Avataryug account.
     * This is designed to allow for a Avataryug ID lookup of any arbitrary service identifier a Project wants to add.
     * This identifier should never be used as authentication credentials, as the intent is that it is easily accessible by other users
     * @param listener
     */
    fun addGenericServiceID(listener: OnAddGenericServiceIDListener)
    {
        apiBase.callApi(object : Base.OnApiResultListener {
            override fun onResult(response: Any) {
                if (response is AddGenericServiceIDResult) {
                    listener.onAddGenericServiceIDResult(response)
                } else {
                    listener.onAddGenericServiceIDError(Exception("Invalid response type"))
                }
            }

            override fun onError(error: Exception) {
                listener.onAddGenericServiceIDError(error)
            }
        })
    }

    /**
     * Define the listener interface for the addGenericServiceID method.
     */
    interface OnAddGenericServiceIDListener
    {
        fun onAddGenericServiceIDResult(result: AddGenericServiceIDResult)
        fun onAddGenericServiceIDError(error: Exception)
    }

    /**
     *  Adds the specified generic service identifier to the user's Avataryug account.
     *  This is designed to allow for a Avataryug ID lookup of any arbitrary service identifier a Project wants to add.
     *  This identifier should never be used as authentication credentials, as the intent is that it is easily accessible by other us
     */
    class AddGenericServiceID(private val genericServiceID: String) : Base
    {
        override fun callApi(listener: Base.OnApiResultListener)
        {
            GlobalScope.launch(Dispatchers.IO)
            {
                try
                {
                    val request = AddGenericServiceIDRequest( genericServiceID = genericServiceID )
                    val apiInstance = UserAccountManagementApi()
                    val result: AddGenericServiceIDResult = apiInstance.addGenericServiceID(request)
                    listener.onResult(result)
                }
                catch (e: ClientException)
                {
                    listener.onError(e)
                }
                catch (e: ServerException)
                {
                    listener.onError(e)
                }
                catch (e: Exception)
                {
                    listener.onError(e)
                }
            }

        }
    }

    /**
     * Removes a generic service ID from the user's account.
     * @param listener
    */
    fun removeGenericServiceID(listener: OnRemoveGenericServiceIDListener)
    {
        apiBase.callApi(object : Base.OnApiResultListener {
            override fun onResult(response: Any) {
                if (response is RemoveGenericServiceIDResult) {
                    listener.onRemoveGenericServiceIDResult(response)
                } else {
                    listener.onRemoveGenericServiceIDError(Exception("Invalid response type"))
                }
            }

            override fun onError(error: Exception) {
                listener.onRemoveGenericServiceIDError(error)
            }
        })
    }

    /**
     * Define the listener interface for the removeGenericServiceID method.
     */
    interface OnRemoveGenericServiceIDListener
    {
        fun onRemoveGenericServiceIDResult(result: RemoveGenericServiceIDResult)
        fun onRemoveGenericServiceIDError(error: Exception)
    }

    /**
     * Removes the generic service identifier from the user's Avataryug account.
     */
    class RemoveGenericServiceID : Base
    {
        override fun callApi(listener: Base.OnApiResultListener)
        {
            // Use Retrofit to make the API call
            GlobalScope.launch(Dispatchers.IO)
            {
                try
                {
                    val apiInstance = UserAccountManagementApi()
                    val result: RemoveGenericServiceIDResult = apiInstance.removeGenericServiceID()
                    listener.onResult(result)
                }
                catch (e: ClientException)
                {
                    listener.onError(e)
                }
                catch (e: ServerException)
                {
                    listener.onError(e)
                }
                catch (e: Exception)
                {
                    listener.onError(e)
                }
            }
        }
    }

    /**
     * Updates the display name of the user in the project.
     * @param listener
     */
    fun updateUserProjectDisplayName(listener: OnUpdateUserProjectDisplayNameListener)
    {
        apiBase.callApi(object : Base.OnApiResultListener {
            override fun onResult(response: Any) {
                if (response is UpdateUserProjectDisplayNameResult) {
                    listener.onUpdateUserProjectDisplayNameResult(response)
                } else {
                    listener.onUpdateUserProjectDisplayNameError(Exception("Invalid response type"))
                }
            }

            override fun onError(error: Exception) {
                listener.onUpdateUserProjectDisplayNameError(error)
            }
        })
    }

    /**
     * Define the listener interface for the updateUserProjectDisplayName method.
     */
    interface OnUpdateUserProjectDisplayNameListener
    {
        fun onUpdateUserProjectDisplayNameResult(result: UpdateUserProjectDisplayNameResult)
        fun onUpdateUserProjectDisplayNameError(error: Exception)
    }

    /**
     * Updates the display name for the user in the project.
     */
    class UpdateUserProjectDisplayName(private val displayName: String) : Base
    {
        override fun callApi(listener: Base.OnApiResultListener)
        {
            GlobalScope.launch(Dispatchers.IO)
            {
                try
                {
                    val request = UpdateUserProjectDisplayNameRequest(displayName = displayName)
                    val apiInstance = UserAccountManagementApi()
                    val result: UpdateUserProjectDisplayNameResult = apiInstance.updateUserProjectDisplayName(request)
                    listener.onResult(result)
                }
                catch (e: ClientException)
                {
                    listener.onError(e)
                }
                catch (e: ServerException)
                {
                    listener.onError(e)
                }
                catch (e: Exception)
                {
                    listener.onError(e)
                }
            }
        }
    }

    /**
     * Retrieves information about the user's account.
     * @param listener
     */
    fun getUserAccountInfo(listener: OnGetUserAccountInfoListener)
    {
        apiBase.callApi(object : Base.OnApiResultListener {
            override fun onResult(response: Any) {
                if (response is GetUserAccountInfoResult) {
                    listener.onGetUserAccountInfoResult(response)
                } else {
                    listener.onGetUserAccountInfoError(Exception("Invalid response type"))
                }
            }

            override fun onError(error: Exception) {
                listener.onGetUserAccountInfoError(error)
            }
        })
    }

    /**
     * Define the listener interface for the getUserAccountInfo method.
     */
    interface OnGetUserAccountInfoListener
    {
        fun onGetUserAccountInfoResult(result: GetUserAccountInfoResult)
        fun onGetUserAccountInfoError(error: Exception)
    }

    /**
     *  Retrieves information about the user's account.
     */
    class GetUserAccountInfo : Base
    {
        override fun callApi(listener: Base.OnApiResultListener)
        {
                GlobalScope.launch(Dispatchers.IO)
                {
                    try
                    {
                        val apiInstance = UserAccountManagementApi()
                        val result: GetUserAccountInfoResult = apiInstance.getUserAccountInfo()
                        listener.onResult(result)
                    }
                    catch (e: ClientException)
                    {
                        listener.onError(e)
                    }
                    catch (e: ServerException)
                    {
                        listener.onError(e)
                    }
                    catch (e: Exception)
                    {
                        listener.onError(e)
                    }
                }
        }
    }

    /**
     * Add the UpdateUserDemographics method
     * @param listener
     */
    fun updateUserDemographics(listener: OnUpdateUserDemographicsListener)
    {
        apiBase.callApi(object : Base.OnApiResultListener {
            override fun onResult(response: Any) {
                if (response is UpdateUserDemographicsResult) {
                    listener.onUpdateUserDemographicsResult(response)
                } else {
                    listener.onUpdateUserDemographicsError(Exception("Invalid response type"))
                }
            }

            override fun onError(error: Exception) {
                listener.onUpdateUserDemographicsError(error)
            }
        })
    }

    /**
     * Define the listener interface for the updateUserDemographics method.
     */
    interface OnUpdateUserDemographicsListener
    {
        fun onUpdateUserDemographicsResult(result: UpdateUserDemographicsResult)
        fun onUpdateUserDemographicsError(error: Exception)
    }

    /**
     * Updates user demographic information.
     */
    class UpdateUserDemographics(private val gender: String, private val ageRange: String, private val race: String) : Base
    {
        override fun callApi(listener: Base.OnApiResultListener) {
            GlobalScope.launch(Dispatchers.IO)
            {
                try
                {
                    val request = UpdateUserDemographicsRequest(ageRange = ageRange,race = race,gender = gender)
                    val apiInstance = UserAccountManagementApi()
                    val result: UpdateUserDemographicsResult = apiInstance.updateUserDemographics(request)
                    listener.onResult(result)
                }
                catch (e: ClientException)
                {
                    listener.onError(e)
                }
                catch (e: ServerException)
                {
                    listener.onError(e)
                }
                catch (e: Exception)
                {
                    listener.onError(e)
                }
            }


        }
    }

    /**
     * Retrieves the user's public profile information.
     * @param listener
     */
    fun getUserProfile(listener: OnGetUserProfileListener)
    {
        apiBase.callApi(object : Base.OnApiResultListener {
            override fun onResult(response: Any) {
                if (response is GetUserProfileResult) {
                    listener.onGetUserProfileResult(response)
                } else {
                    listener.onGetUserProfileError(Exception("Invalid response type"))
                }
            }
            override fun onError(error: Exception) {
                listener.onGetUserProfileError(error)
            }
        })
    }

    /**
     * Define the listener interface for the getUserProfile method.
     */
    interface OnGetUserProfileListener
    {
        fun onGetUserProfileResult(result: GetUserProfileResult)
        fun onGetUserProfileError(error: Exception)
    }

    /**
     * Retrieves the user's public profile information.
     */
    class GetUserProfile(private val userID: String) : Base
    {
        override fun callApi(listener: Base.OnApiResultListener)
        {
            GlobalScope.launch(Dispatchers.IO)
            {
                try
                {
                    val apiInstance = UserAccountManagementApi()
                    val result: GetUserProfileResult = apiInstance.getUserProfile(userID)
                    listener.onResult(result)
                }
                catch (e: ClientException)
                {
                    listener.onError(e)
                }
                catch (e: ServerException)
                {
                    listener.onError(e)
                }
                catch (e: Exception)
                {
                    listener.onError(e)
                }
            }
        }
    }

    /**
     * Deletes a user account.
     * @param listener
     */
    fun deleteUser(listener: OnDeleteUserListener)
    {
        apiBase.callApi(object : Base.OnApiResultListener {
            override fun onResult(response: Any) {
                if (response is DeleteUserResult) {
                    listener.onDeleteUserResult(response)
                } else {
                    listener.onDeleteUserError(Exception("Invalid response type"))
                }
            }

            override fun onError(error: Exception) {
                listener.onDeleteUserError(error)
            }
        })
    }

    /**
     * Define the listener interface for the deleteUser method.
     */
    interface OnDeleteUserListener
    {
        fun onDeleteUserResult(result: DeleteUserResult)
        fun onDeleteUserError(error: Exception)
    }

    /**
     * Delete User Account from Avataryug platform.
     */
    class DeleteUser : Base
    {
        override fun callApi(listener: Base.OnApiResultListener)
        {
            // Use Retrofit to make the API call
            GlobalScope.launch(Dispatchers.IO)
            {
                try
                {
                    val apiInstance = UserAccountManagementApi()
                    val result: DeleteUserResult = apiInstance.deleteUser()
                    listener.onResult(result)
                }
                catch (e: ClientException)
                {
                    listener.onError(e)
                }
                catch (e: ServerException)
                {
                    listener.onError(e)
                }
                catch (e: Exception)
                {
                    listener.onError(e)
                }
            }
        }
    }

    /**
     *Updates the default avatar ID for the user.
     * @param listener
     */
    fun updateDefaultAvatarID(listener: OnUpdateDefaultAvatarIDListener)
    {
        apiBase.callApi(object : Base.OnApiResultListener {
            override fun onResult(response: Any) {
                if (response is UpdateDefaultAvatarIDResult) {
                    listener.onUpdateDefaultAvatarIDResult(response)
                } else {
                    listener.onUpdateDefaultAvatarIDError(Exception("Invalid response type"))
                }
            }

            override fun onError(error: Exception) {
                listener.onUpdateDefaultAvatarIDError(error)
            }
        })
    }

    /**
     * Define the listener interface for the updateDefaultAvatarID method
     */
    interface OnUpdateDefaultAvatarIDListener
    {
        fun onUpdateDefaultAvatarIDResult(result: UpdateDefaultAvatarIDResult)
        fun onUpdateDefaultAvatarIDError(error: Exception)
    }

    /**
     * Sets the default avatar ID to users account
     */
    class UpdateDefaultAvatarID(private val defaultAvatarID: String) : Base
    {
        override fun callApi(listener: Base.OnApiResultListener)
        {
            GlobalScope.launch(Dispatchers.IO)
            {
                try
                {
                    val request = UpdateDefaultAvatarIDRequest(defaultAvatarID = defaultAvatarID)
                    val apiInstance = UserAccountManagementApi()
                    val result: UpdateDefaultAvatarIDResult = apiInstance.updateDefaultAvatarID(request)
                    listener.onResult(result)
                }
                catch (e: ClientException)
                {
                    listener.onError(e)
                }
                catch (e: ServerException)
                {
                    listener.onError(e)
                }
                catch (e: Exception)
                {
                    listener.onError(e)
                }
            }

        }
    }

    /**
     * Allows users to change their password.
     * @param listener
     */
    fun changePassword(listener: OnChangePasswordListener)
    {
        apiBase.callApi(object : Base.OnApiResultListener
        {
            override fun onResult(response: Any)
            {
                if (response is ChangePasswordResult)
                {
                    listener.onChangePasswordResult(response)
                } else
                {
                    listener.onChangePasswordError(Exception("Invalid response type"))
                }
            }

            override fun onError(error: Exception)
            {
                listener.onChangePasswordError(error)
            }
        })
    }

    /**
     * Define the listener interface for the ChangePassword method
     */
    interface OnChangePasswordListener
    {
        fun onChangePasswordResult(result: ChangePasswordResult?)
        fun onChangePasswordError(error: Exception)
    }

    /**
     * Allows users to change their password.
     */
    class ChangePassword(private val newPassword: String, private val oldPassword: String) : Base
    {
        override fun callApi(listener: Base.OnApiResultListener)
        {
            GlobalScope.launch(Dispatchers.IO)
            {
                try
                {
                    val request = ChangePasswordRequest(newPassword = newPassword,oldPassword = oldPassword)
                    val apiInstance = UserAccountManagementApi()
                    val result: ChangePasswordResult = apiInstance.changePassword(request)
                    listener.onResult(result)
                }
                catch (e: ClientException)
                {
                    listener.onError(e)
                }
                catch (e: ServerException)
                {
                    listener.onError(e)
                }
                catch (e: Exception)
                {
                    listener.onError(e)
                }
            }

        }

    }
}


