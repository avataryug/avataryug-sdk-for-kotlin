/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.Avataryug.client.Apis

import Avataryug.Client.AvatarProjectSettings
import com.Avataryug.client.Infrastructure.ApiClient
import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import com.Avataryug.client.Models.GetEconomyBundleByIDResult
import com.Avataryug.client.Models.GetEconomyBundlesResult
import com.Avataryug.client.Models.GetEconomyContainerByIDResult
import com.Avataryug.client.Models.GetEconomyContainersResult
import com.Avataryug.client.Models.GetEconomyItemsByIDResult
import com.Avataryug.client.Models.GetEconomyItemsResult
import com.Avataryug.client.Models.GetEconomyStoresResult
import com.Avataryug.client.Models.GetStoreItemsByIDResult

import com.Avataryug.client.Infrastructure.ApiResponse
import com.Avataryug.client.Infrastructure.ClientException
import com.Avataryug.client.Infrastructure.ClientError
import com.Avataryug.client.Infrastructure.ServerException
import com.Avataryug.client.Infrastructure.ServerError
import com.Avataryug.client.Infrastructure.MultiValueMap
import com.Avataryug.client.Infrastructure.RequestConfig
import com.Avataryug.client.Infrastructure.RequestMethod
import com.Avataryug.client.Infrastructure.ResponseType
import com.Avataryug.client.Infrastructure.Success

/**
 * Represents a collection of functions to interact with the API endpoints
 */
class EconomyApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            val id = AvatarProjectSettings.Project_Id
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://$id.avataryugapi.com/client")
        }
    }

    /**
     * Get Economy Bundles by ID
     * Get Economy Bundles by ID
     * @param bundleID Unqiue identifier for the bundle which is being requested.
     * @return GetEconomyBundleByIDResult
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getEconomyBundleByID(bundleID: kotlin.String) : GetEconomyBundleByIDResult {
        val localVarResponse = getEconomyBundleByIDWithHttpInfo(bundleID = bundleID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetEconomyBundleByIDResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Economy Bundles by ID
     * Get Economy Bundles by ID
     * @param bundleID Unqiue identifier for the bundle which is being requested.
     * @return ApiResponse<GetEconomyBundleByIDResult?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getEconomyBundleByIDWithHttpInfo(bundleID: kotlin.String) : ApiResponse<GetEconomyBundleByIDResult?> {
        val localVariableConfig = getEconomyBundleByIDRequestConfig(bundleID = bundleID)

        return request<Unit, GetEconomyBundleByIDResult>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getEconomyBundleByID
     *
     * @param bundleID Unqiue identifier for the bundle which is being requested.
     * @return RequestConfig
     */
    fun getEconomyBundleByIDRequestConfig(bundleID: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("BundleID", listOf(bundleID.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/GetEconomyBundleByID",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get Economy Bundles
     * Get Economy Bundles
     * @param status Status of the Bundles
     * @return GetEconomyBundlesResult
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getEconomyBundles(status: kotlin.Int) : GetEconomyBundlesResult {
        val localVarResponse = getEconomyBundlesWithHttpInfo(status = status)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetEconomyBundlesResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Economy Bundles
     * Get Economy Bundles
     * @param status Status of the Bundles
     * @return ApiResponse<GetEconomyBundlesResult?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getEconomyBundlesWithHttpInfo(status: kotlin.Int) : ApiResponse<GetEconomyBundlesResult?> {
        val localVariableConfig = getEconomyBundlesRequestConfig(status = status)

        return request<Unit, GetEconomyBundlesResult>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getEconomyBundles
     *
     * @param status Status of the Bundles
     * @return RequestConfig
     */
    fun getEconomyBundlesRequestConfig(status: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("Status", listOf(status.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/GetEconomyBundles",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get Economy Container by ID
     * Get Economy Container by ID
     * @param containerID Unqiue identifier for the container which is being requested.
     * @return GetEconomyContainerByIDResult
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getEconomyContainerByID(containerID: kotlin.String) : GetEconomyContainerByIDResult {
        val localVarResponse = getEconomyContainerByIDWithHttpInfo(containerID = containerID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetEconomyContainerByIDResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Economy Container by ID
     * Get Economy Container by ID
     * @param containerID Unqiue identifier for the container which is being requested.
     * @return ApiResponse<GetEconomyContainerByIDResult?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getEconomyContainerByIDWithHttpInfo(containerID: kotlin.String) : ApiResponse<GetEconomyContainerByIDResult?> {
        val localVariableConfig = getEconomyContainerByIDRequestConfig(containerID = containerID)

        return request<Unit, GetEconomyContainerByIDResult>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getEconomyContainerByID
     *
     * @param containerID Unqiue identifier for the container which is being requested.
     * @return RequestConfig
     */
    fun getEconomyContainerByIDRequestConfig(containerID: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("ContainerID", listOf(containerID.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/GetEconomyContainerByID",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get Economy Containers
     * Get Economy Containers
     * @param status Status of the Containers
     * @return GetEconomyContainersResult
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getEconomyContainers(status: kotlin.Int) : GetEconomyContainersResult {
        val localVarResponse = getEconomyContainersWithHttpInfo(status = status)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetEconomyContainersResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Economy Containers
     * Get Economy Containers
     * @param status Status of the Containers
     * @return ApiResponse<GetEconomyContainersResult?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getEconomyContainersWithHttpInfo(status: kotlin.Int) : ApiResponse<GetEconomyContainersResult?> {
        val localVariableConfig = getEconomyContainersRequestConfig(status = status)

        return request<Unit, GetEconomyContainersResult>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getEconomyContainers
     *
     * @param status Status of the Containers
     * @return RequestConfig
     */
    fun getEconomyContainersRequestConfig(status: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("Status", listOf(status.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/GetEconomyContainers",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get Economy Items
     * Get Economy Items
     * @param category Category of the Item
     * @param status Status of the Item
     * @param gender Gender type of the item
     * @return GetEconomyItemsResult
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getEconomyItems(category: kotlin.String, status: kotlin.Int, gender: kotlin.Int) : GetEconomyItemsResult {
        val localVarResponse = getEconomyItemsWithHttpInfo(category = category, status = status, gender = gender)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetEconomyItemsResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Economy Items
     * Get Economy Items
     * @param category Category of the Item
     * @param status Status of the Item
     * @param gender Gender type of the item
     * @return ApiResponse<GetEconomyItemsResult?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getEconomyItemsWithHttpInfo(category: kotlin.String, status: kotlin.Int, gender: kotlin.Int) : ApiResponse<GetEconomyItemsResult?> {
        val localVariableConfig = getEconomyItemsRequestConfig(category = category, status = status, gender = gender)

        return request<Unit, GetEconomyItemsResult>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getEconomyItems
     *
     * @param category Category of the Item
     * @param status Status of the Item
     * @param gender Gender type of the item
     * @return RequestConfig
     */
    fun getEconomyItemsRequestConfig(category: kotlin.String, status: kotlin.Int, gender: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("Category", listOf(category.toString()))
                put("Status", listOf(status.toString()))
                put("Gender", listOf(gender.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/GetEconomyItems",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get Economy Item by ID
     * Get Economy Item by ID
     * @param itemID Unqiue identifier for the item which is being requested.
     * @return GetEconomyItemsByIDResult
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getEconomyItemsByID(itemID: kotlin.String) : GetEconomyItemsByIDResult {
        val localVarResponse = getEconomyItemsByIDWithHttpInfo(itemID = itemID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetEconomyItemsByIDResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Economy Item by ID
     * Get Economy Item by ID
     * @param itemID Unqiue identifier for the item which is being requested.
     * @return ApiResponse<GetEconomyItemsByIDResult?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getEconomyItemsByIDWithHttpInfo(itemID: kotlin.String) : ApiResponse<GetEconomyItemsByIDResult?> {
        val localVariableConfig = getEconomyItemsByIDRequestConfig(itemID = itemID)

        return request<Unit, GetEconomyItemsByIDResult>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getEconomyItemsByID
     *
     * @param itemID Unqiue identifier for the item which is being requested.
     * @return RequestConfig
     */
    fun getEconomyItemsByIDRequestConfig(itemID: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("ItemID", listOf(itemID.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/GetEconomyItemsByID",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get Economy Stores
     * Get Economy Stores
     * @param status Status of the Stores
     * @return GetEconomyStoresResult
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getEconomyStores(status: kotlin.Int) : GetEconomyStoresResult {
        val localVarResponse = getEconomyStoresWithHttpInfo(status = status)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetEconomyStoresResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Economy Stores
     * Get Economy Stores
     * @param status Status of the Stores
     * @return ApiResponse<GetEconomyStoresResult?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getEconomyStoresWithHttpInfo(status: kotlin.Int) : ApiResponse<GetEconomyStoresResult?> {
        val localVariableConfig = getEconomyStoresRequestConfig(status = status)

        return request<Unit, GetEconomyStoresResult>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getEconomyStores
     *
     * @param status Status of the Stores
     * @return RequestConfig
     */
    fun getEconomyStoresRequestConfig(status: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("Status", listOf(status.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/GetEconomyStores",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get Store Items by ID
     * Retrieves the set of items defined for the specified store, including all prices defined
     * @param storeID Unqiue identifier for the store which is being requested.
     * @return GetStoreItemsByIDResult
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getStoreItemsByID(storeID: kotlin.String) : GetStoreItemsByIDResult {
        val localVarResponse = getStoreItemsByIDWithHttpInfo(storeID = storeID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetStoreItemsByIDResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Store Items by ID
     * Retrieves the set of items defined for the specified store, including all prices defined
     * @param storeID Unqiue identifier for the store which is being requested.
     * @return ApiResponse<GetStoreItemsByIDResult?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getStoreItemsByIDWithHttpInfo(storeID: kotlin.String) : ApiResponse<GetStoreItemsByIDResult?> {
        val localVariableConfig = getStoreItemsByIDRequestConfig(storeID = storeID)

        return request<Unit, GetStoreItemsByIDResult>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getStoreItemsByID
     *
     * @param storeID Unqiue identifier for the store which is being requested.
     * @return RequestConfig
     */
    fun getStoreItemsByIDRequestConfig(storeID: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("StoreID", listOf(storeID.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/GetStoreItemsByID",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
