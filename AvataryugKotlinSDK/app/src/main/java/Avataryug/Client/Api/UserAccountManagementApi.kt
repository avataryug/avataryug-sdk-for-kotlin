/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.Avataryug.client.Apis

import Avataryug.Client.AvatarProjectSettings
import com.Avataryug.client.Infrastructure.ApiClient
import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import com.Avataryug.client.Models.AddEmailPasswordRequest
import com.Avataryug.client.Models.AddEmailPasswordResult
import com.Avataryug.client.Models.AddGenericServiceIDRequest
import com.Avataryug.client.Models.AddGenericServiceIDResult
import com.Avataryug.client.Models.ChangePasswordRequest
import com.Avataryug.client.Models.ChangePasswordResult
import com.Avataryug.client.Models.DeleteUserResult
import com.Avataryug.client.Models.GetUserAccountInfoResult
import com.Avataryug.client.Models.GetUserProfileResult
import com.Avataryug.client.Models.LinkAndroidDeviceIDRequest
import com.Avataryug.client.Models.LinkAndroidDeviceIDResult
import com.Avataryug.client.Models.LinkAppleRequest
import com.Avataryug.client.Models.LinkAppleResult
import com.Avataryug.client.Models.LinkCustomIDRequest
import com.Avataryug.client.Models.LinkCustomIDResult
import com.Avataryug.client.Models.LinkFacebookAccountRequest
import com.Avataryug.client.Models.LinkFacebookAccountResult
import com.Avataryug.client.Models.LinkGoogleAccountRequest
import com.Avataryug.client.Models.LinkGoogleAccountResult
import com.Avataryug.client.Models.LinkIOSDeviceIDRequest
import com.Avataryug.client.Models.LinkIOSDeviceIDResult
import com.Avataryug.client.Models.RemoveGenericServiceIDResult
import com.Avataryug.client.Models.SendAccountRecoveryEmailRequset
import com.Avataryug.client.Models.SendAccountRecoveryEmailResult
import com.Avataryug.client.Models.SendAccountVerificationEmailRequest
import com.Avataryug.client.Models.SendAccountVerificationEmailResult
import com.Avataryug.client.Models.UnlinkAndroidDeviceIDResult
import com.Avataryug.client.Models.UnlinkAppleResult
import com.Avataryug.client.Models.UnlinkCustomIDResult
import com.Avataryug.client.Models.UnlinkFacebookAccountResult
import com.Avataryug.client.Models.UnlinkGoogleAccountResult
import com.Avataryug.client.Models.UnlinkIOSDeviceIDResult
import com.Avataryug.client.Models.UpdateDefaultAvatarIDRequest
import com.Avataryug.client.Models.UpdateDefaultAvatarIDResult
import com.Avataryug.client.Models.UpdateEmailPasswordRequest
import com.Avataryug.client.Models.UpdateEmailPasswordResult
import com.Avataryug.client.Models.UpdateUserDemographicsRequest
import com.Avataryug.client.Models.UpdateUserDemographicsResult
import com.Avataryug.client.Models.UpdateUserProjectDisplayNameRequest
import com.Avataryug.client.Models.UpdateUserProjectDisplayNameResult
import com.Avataryug.client.Models.VerifyUserWithEmailRequest
import com.Avataryug.client.Models.VerifyUserWithEmailResult

import com.Avataryug.client.Infrastructure.ApiResponse
import com.Avataryug.client.Infrastructure.ClientException
import com.Avataryug.client.Infrastructure.ClientError
import com.Avataryug.client.Infrastructure.ServerException
import com.Avataryug.client.Infrastructure.ServerError
import com.Avataryug.client.Infrastructure.MultiValueMap
import com.Avataryug.client.Infrastructure.RequestConfig
import com.Avataryug.client.Infrastructure.RequestMethod
import com.Avataryug.client.Infrastructure.ResponseType
import com.Avataryug.client.Infrastructure.Success

/**
 * Represents a collection of functions to interact with the API endpoints
 */
class UserAccountManagementApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            val id = AvatarProjectSettings.Project_Id
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://$id.avataryugapi.com/client")
        }
    }

    /**
     * Add Email Password
     * Adds AvatarYug email/password auth to an existing account created via an anonymous auth method, e.g. automatic device ID login.
     * @param addEmailPasswordRequest  (optional)
     * @return AddEmailPasswordResult
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun addEmailPassword(addEmailPasswordRequest: AddEmailPasswordRequest? = null) : AddEmailPasswordResult {
        val localVarResponse = addEmailPasswordWithHttpInfo(addEmailPasswordRequest = addEmailPasswordRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AddEmailPasswordResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Add Email Password
     * Adds AvatarYug email/password auth to an existing account created via an anonymous auth method, e.g. automatic device ID login.
     * @param addEmailPasswordRequest  (optional)
     * @return ApiResponse<AddEmailPasswordResult?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun addEmailPasswordWithHttpInfo(addEmailPasswordRequest: AddEmailPasswordRequest?) : ApiResponse<AddEmailPasswordResult?> {
        val localVariableConfig = addEmailPasswordRequestConfig(addEmailPasswordRequest = addEmailPasswordRequest)

        return request<AddEmailPasswordRequest, AddEmailPasswordResult>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation addEmailPassword
     *
     * @param addEmailPasswordRequest  (optional)
     * @return RequestConfig
     */
    fun addEmailPasswordRequestConfig(addEmailPasswordRequest: AddEmailPasswordRequest?) : RequestConfig<AddEmailPasswordRequest> {
        val localVariableBody = addEmailPasswordRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/AddEmailPassword",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Add Generic Service ID
     * Adds the specified generic service identifier to the user&#39;s AvatarYug account. This is designed to allow for a AvatarYug ID lookup of any arbitrary service identifier a Project wants to add. This identifier should never be used as authentication credentials, as the intent is that it is easily accessible by other users.
     * @param addGenericServiceIDRequest  (optional)
     * @return AddGenericServiceIDResult
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun addGenericServiceID(addGenericServiceIDRequest: AddGenericServiceIDRequest? = null) : AddGenericServiceIDResult {
        val localVarResponse = addGenericServiceIDWithHttpInfo(addGenericServiceIDRequest = addGenericServiceIDRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AddGenericServiceIDResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Add Generic Service ID
     * Adds the specified generic service identifier to the user&#39;s AvatarYug account. This is designed to allow for a AvatarYug ID lookup of any arbitrary service identifier a Project wants to add. This identifier should never be used as authentication credentials, as the intent is that it is easily accessible by other users.
     * @param addGenericServiceIDRequest  (optional)
     * @return ApiResponse<AddGenericServiceIDResult?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun addGenericServiceIDWithHttpInfo(addGenericServiceIDRequest: AddGenericServiceIDRequest?) : ApiResponse<AddGenericServiceIDResult?> {
        val localVariableConfig = addGenericServiceIDRequestConfig(addGenericServiceIDRequest = addGenericServiceIDRequest)

        return request<AddGenericServiceIDRequest, AddGenericServiceIDResult>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation addGenericServiceID
     *
     * @param addGenericServiceIDRequest  (optional)
     * @return RequestConfig
     */
    fun addGenericServiceIDRequestConfig(addGenericServiceIDRequest: AddGenericServiceIDRequest?) : RequestConfig<AddGenericServiceIDRequest> {
        val localVariableBody = addGenericServiceIDRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/AddGenericServiceID",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Change Password
     *
     * @param changePasswordRequest  (optional)
     * @return ChangePasswordResult
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun changePassword(changePasswordRequest: ChangePasswordRequest? = null) : ChangePasswordResult {
        val localVarResponse = changePasswordWithHttpInfo(changePasswordRequest = changePasswordRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ChangePasswordResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Change Password
     *
     * @param changePasswordRequest  (optional)
     * @return ApiResponse<ChangePasswordResult?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun changePasswordWithHttpInfo(changePasswordRequest: ChangePasswordRequest?) : ApiResponse<ChangePasswordResult?> {
        val localVariableConfig = changePasswordRequestConfig(changePasswordRequest = changePasswordRequest)

        return request<ChangePasswordRequest, ChangePasswordResult>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation changePassword
     *
     * @param changePasswordRequest  (optional)
     * @return RequestConfig
     */
    fun changePasswordRequestConfig(changePasswordRequest: ChangePasswordRequest?) : RequestConfig<ChangePasswordRequest> {
        val localVariableBody = changePasswordRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/ChangePassword",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Delete User
     * Delete User Account from Avataryug platform.
     * @return DeleteUserResult
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteUser() : DeleteUserResult {
        val localVarResponse = deleteUserWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DeleteUserResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete User
     * Delete User Account from Avataryug platform.
     * @return ApiResponse<DeleteUserResult?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteUserWithHttpInfo() : ApiResponse<DeleteUserResult?> {
        val localVariableConfig = deleteUserRequestConfig()

        return request<Unit, DeleteUserResult>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteUser
     *
     * @return RequestConfig
     */
    fun deleteUserRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/DeleteUser",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get User Account Info
     * Get user&#39;s complete account information
     * @return GetUserAccountInfoResult
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getUserAccountInfo() : GetUserAccountInfoResult {
        val localVarResponse = getUserAccountInfoWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetUserAccountInfoResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get User Account Info
     * Get user&#39;s complete account information
     * @return ApiResponse<GetUserAccountInfoResult?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getUserAccountInfoWithHttpInfo() : ApiResponse<GetUserAccountInfoResult?> {
        val localVariableConfig = getUserAccountInfoRequestConfig()

        return request<Unit, GetUserAccountInfoResult>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getUserAccountInfo
     *
     * @return RequestConfig
     */
    fun getUserAccountInfoRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/GetUserAccountInfo",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get User Profile
     * Get Public data for the User
     * @param userID Unique AvatarYug assigned ID of the user on whom the operation will be performed
     * @return GetUserProfileResult
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getUserProfile(userID: kotlin.String) : GetUserProfileResult {
        val localVarResponse = getUserProfileWithHttpInfo(userID = userID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetUserProfileResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get User Profile
     * Get Public data for the User
     * @param userID Unique AvatarYug assigned ID of the user on whom the operation will be performed
     * @return ApiResponse<GetUserProfileResult?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getUserProfileWithHttpInfo(userID: kotlin.String) : ApiResponse<GetUserProfileResult?> {
        val localVariableConfig = getUserProfileRequestConfig(userID = userID)

        return request<Unit, GetUserProfileResult>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getUserProfile
     *
     * @param userID Unique AvatarYug assigned ID of the user on whom the operation will be performed
     * @return RequestConfig
     */
    fun getUserProfileRequestConfig(userID: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("UserID", listOf(userID.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/GetUserProfile",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Link Android Device ID
     * Links the Android device identifier to the user&#39;s AvatarYug account
     * @param linkAndroidDeviceIDRequest  (optional)
     * @return LinkAndroidDeviceIDResult
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun linkAndroidDeviceID(linkAndroidDeviceIDRequest: LinkAndroidDeviceIDRequest? = null) : LinkAndroidDeviceIDResult {
        val localVarResponse = linkAndroidDeviceIDWithHttpInfo(linkAndroidDeviceIDRequest = linkAndroidDeviceIDRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as LinkAndroidDeviceIDResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Link Android Device ID
     * Links the Android device identifier to the user&#39;s AvatarYug account
     * @param linkAndroidDeviceIDRequest  (optional)
     * @return ApiResponse<LinkAndroidDeviceIDResult?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun linkAndroidDeviceIDWithHttpInfo(linkAndroidDeviceIDRequest: LinkAndroidDeviceIDRequest?) : ApiResponse<LinkAndroidDeviceIDResult?> {
        val localVariableConfig = linkAndroidDeviceIDRequestConfig(linkAndroidDeviceIDRequest = linkAndroidDeviceIDRequest)

        return request<LinkAndroidDeviceIDRequest, LinkAndroidDeviceIDResult>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation linkAndroidDeviceID
     *
     * @param linkAndroidDeviceIDRequest  (optional)
     * @return RequestConfig
     */
    fun linkAndroidDeviceIDRequestConfig(linkAndroidDeviceIDRequest: LinkAndroidDeviceIDRequest?) : RequestConfig<LinkAndroidDeviceIDRequest> {
        val localVariableBody = linkAndroidDeviceIDRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/LinkAndroidDeviceID",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Link Apple
     * Links the Apple account associated with the token to the user&#39;s AvatarYug account.
     * @param linkAppleRequest  (optional)
     * @return LinkAppleResult
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun linkApple(linkAppleRequest: LinkAppleRequest? = null) : LinkAppleResult {
        val localVarResponse = linkAppleWithHttpInfo(linkAppleRequest = linkAppleRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as LinkAppleResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Link Apple
     * Links the Apple account associated with the token to the user&#39;s AvatarYug account.
     * @param linkAppleRequest  (optional)
     * @return ApiResponse<LinkAppleResult?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun linkAppleWithHttpInfo(linkAppleRequest: LinkAppleRequest?) : ApiResponse<LinkAppleResult?> {
        val localVariableConfig = linkAppleRequestConfig(linkAppleRequest = linkAppleRequest)

        return request<LinkAppleRequest, LinkAppleResult>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation linkApple
     *
     * @param linkAppleRequest  (optional)
     * @return RequestConfig
     */
    fun linkAppleRequestConfig(linkAppleRequest: LinkAppleRequest?) : RequestConfig<LinkAppleRequest> {
        val localVariableBody = linkAppleRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/LinkApple",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Link Custom ID
     * Links the custom identifier, generated by the Project, to the user&#39;s AvatarYug account
     * @param linkCustomIDRequest  (optional)
     * @return LinkCustomIDResult
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun linkCustomID(linkCustomIDRequest: LinkCustomIDRequest? = null) : LinkCustomIDResult {
        val localVarResponse = linkCustomIDWithHttpInfo(linkCustomIDRequest = linkCustomIDRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as LinkCustomIDResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Link Custom ID
     * Links the custom identifier, generated by the Project, to the user&#39;s AvatarYug account
     * @param linkCustomIDRequest  (optional)
     * @return ApiResponse<LinkCustomIDResult?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun linkCustomIDWithHttpInfo(linkCustomIDRequest: LinkCustomIDRequest?) : ApiResponse<LinkCustomIDResult?> {
        val localVariableConfig = linkCustomIDRequestConfig(linkCustomIDRequest = linkCustomIDRequest)

        return request<LinkCustomIDRequest, LinkCustomIDResult>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation linkCustomID
     *
     * @param linkCustomIDRequest  (optional)
     * @return RequestConfig
     */
    fun linkCustomIDRequestConfig(linkCustomIDRequest: LinkCustomIDRequest?) : RequestConfig<LinkCustomIDRequest> {
        val localVariableBody = linkCustomIDRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/LinkCustomID",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Link Facebook Account
     * Links the Facebook account associated with the provided Facebook access token to the user&#39;s AvatarYug account
     * @param linkFacebookAccountRequest  (optional)
     * @return LinkFacebookAccountResult
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun linkFacebookAccount(linkFacebookAccountRequest: LinkFacebookAccountRequest? = null) : LinkFacebookAccountResult {
        val localVarResponse = linkFacebookAccountWithHttpInfo(linkFacebookAccountRequest = linkFacebookAccountRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as LinkFacebookAccountResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Link Facebook Account
     * Links the Facebook account associated with the provided Facebook access token to the user&#39;s AvatarYug account
     * @param linkFacebookAccountRequest  (optional)
     * @return ApiResponse<LinkFacebookAccountResult?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun linkFacebookAccountWithHttpInfo(linkFacebookAccountRequest: LinkFacebookAccountRequest?) : ApiResponse<LinkFacebookAccountResult?> {
        val localVariableConfig = linkFacebookAccountRequestConfig(linkFacebookAccountRequest = linkFacebookAccountRequest)

        return request<LinkFacebookAccountRequest, LinkFacebookAccountResult>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation linkFacebookAccount
     *
     * @param linkFacebookAccountRequest  (optional)
     * @return RequestConfig
     */
    fun linkFacebookAccountRequestConfig(linkFacebookAccountRequest: LinkFacebookAccountRequest?) : RequestConfig<LinkFacebookAccountRequest> {
        val localVariableBody = linkFacebookAccountRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/LinkFacebookAccount",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Link Google Account
     * Links the currently signed-in user account to their Google account, using their Google account credentials
     * @param linkGoogleAccountRequest Linked Google account to user&#39;s account successfully (optional)
     * @return LinkGoogleAccountResult
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun linkGoogleAccount(linkGoogleAccountRequest: LinkGoogleAccountRequest? = null) : LinkGoogleAccountResult {
        val localVarResponse = linkGoogleAccountWithHttpInfo(linkGoogleAccountRequest = linkGoogleAccountRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as LinkGoogleAccountResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Link Google Account
     * Links the currently signed-in user account to their Google account, using their Google account credentials
     * @param linkGoogleAccountRequest Linked Google account to user&#39;s account successfully (optional)
     * @return ApiResponse<LinkGoogleAccountResult?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun linkGoogleAccountWithHttpInfo(linkGoogleAccountRequest: LinkGoogleAccountRequest?) : ApiResponse<LinkGoogleAccountResult?> {
        val localVariableConfig = linkGoogleAccountRequestConfig(linkGoogleAccountRequest = linkGoogleAccountRequest)

        return request<LinkGoogleAccountRequest, LinkGoogleAccountResult>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation linkGoogleAccount
     *
     * @param linkGoogleAccountRequest Linked Google account to user&#39;s account successfully (optional)
     * @return RequestConfig
     */
    fun linkGoogleAccountRequestConfig(linkGoogleAccountRequest: LinkGoogleAccountRequest?) : RequestConfig<LinkGoogleAccountRequest> {
        val localVariableBody = linkGoogleAccountRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/LinkGoogleAccount",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Link IOS Device ID
     * Links the vendor-specific iOS device identifier to the user&#39;s AvatarYug account
     * @param linkIOSDeviceIDRequest  (optional)
     * @return LinkIOSDeviceIDResult
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun linkIOSDeviceID(linkIOSDeviceIDRequest: LinkIOSDeviceIDRequest? = null) : LinkIOSDeviceIDResult {
        val localVarResponse = linkIOSDeviceIDWithHttpInfo(linkIOSDeviceIDRequest = linkIOSDeviceIDRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as LinkIOSDeviceIDResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Link IOS Device ID
     * Links the vendor-specific iOS device identifier to the user&#39;s AvatarYug account
     * @param linkIOSDeviceIDRequest  (optional)
     * @return ApiResponse<LinkIOSDeviceIDResult?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun linkIOSDeviceIDWithHttpInfo(linkIOSDeviceIDRequest: LinkIOSDeviceIDRequest?) : ApiResponse<LinkIOSDeviceIDResult?> {
        val localVariableConfig = linkIOSDeviceIDRequestConfig(linkIOSDeviceIDRequest = linkIOSDeviceIDRequest)

        return request<LinkIOSDeviceIDRequest, LinkIOSDeviceIDResult>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation linkIOSDeviceID
     *
     * @param linkIOSDeviceIDRequest  (optional)
     * @return RequestConfig
     */
    fun linkIOSDeviceIDRequestConfig(linkIOSDeviceIDRequest: LinkIOSDeviceIDRequest?) : RequestConfig<LinkIOSDeviceIDRequest> {
        val localVariableBody = linkIOSDeviceIDRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/LinkIOSDeviceID",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Remove Generic Service ID
     * Removes the generic service identifier from the user&#39;s AvatarYug account.
     * @return RemoveGenericServiceIDResult
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun removeGenericServiceID() : RemoveGenericServiceIDResult {
        val localVarResponse = removeGenericServiceIDWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as RemoveGenericServiceIDResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Remove Generic Service ID
     * Removes the generic service identifier from the user&#39;s AvatarYug account.
     * @return ApiResponse<RemoveGenericServiceIDResult?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun removeGenericServiceIDWithHttpInfo() : ApiResponse<RemoveGenericServiceIDResult?> {
        val localVariableConfig = removeGenericServiceIDRequestConfig()

        return request<Unit, RemoveGenericServiceIDResult>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation removeGenericServiceID
     *
     * @return RequestConfig
     */
    fun removeGenericServiceIDRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/RemoveGenericServiceID",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Send Account Recovery Email
     *
     * @param sendAccountRecoveryEmailRequset  (optional)
     * @return SendAccountRecoveryEmailResult
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun sendAccountRecoveryEmail(sendAccountRecoveryEmailRequset: SendAccountRecoveryEmailRequset? = null) : SendAccountRecoveryEmailResult {
        val localVarResponse = sendAccountRecoveryEmailWithHttpInfo(sendAccountRecoveryEmailRequset = sendAccountRecoveryEmailRequset)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SendAccountRecoveryEmailResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Send Account Recovery Email
     *
     * @param sendAccountRecoveryEmailRequset  (optional)
     * @return ApiResponse<SendAccountRecoveryEmailResult?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun sendAccountRecoveryEmailWithHttpInfo(sendAccountRecoveryEmailRequset: SendAccountRecoveryEmailRequset?) : ApiResponse<SendAccountRecoveryEmailResult?> {
        val localVariableConfig = sendAccountRecoveryEmailRequestConfig(sendAccountRecoveryEmailRequset = sendAccountRecoveryEmailRequset)

        return request<SendAccountRecoveryEmailRequset, SendAccountRecoveryEmailResult>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation sendAccountRecoveryEmail
     *
     * @param sendAccountRecoveryEmailRequset  (optional)
     * @return RequestConfig
     */
    fun sendAccountRecoveryEmailRequestConfig(sendAccountRecoveryEmailRequset: SendAccountRecoveryEmailRequset?) : RequestConfig<SendAccountRecoveryEmailRequset> {
        val localVariableBody = sendAccountRecoveryEmailRequset
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/SendAccountRecoveryEmail",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Send Account Verification Email
     * Send Verification Email to verify the email address
     * @param sendAccountVerificationEmailRequest  (optional)
     * @return SendAccountVerificationEmailResult
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun sendAccountVerificationEmail(sendAccountVerificationEmailRequest: SendAccountVerificationEmailRequest? = null) : SendAccountVerificationEmailResult {
        val localVarResponse = sendAccountVerificationEmailWithHttpInfo(sendAccountVerificationEmailRequest = sendAccountVerificationEmailRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SendAccountVerificationEmailResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Send Account Verification Email
     * Send Verification Email to verify the email address
     * @param sendAccountVerificationEmailRequest  (optional)
     * @return ApiResponse<SendAccountVerificationEmailResult?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun sendAccountVerificationEmailWithHttpInfo(sendAccountVerificationEmailRequest: SendAccountVerificationEmailRequest?) : ApiResponse<SendAccountVerificationEmailResult?> {
        val localVariableConfig = sendAccountVerificationEmailRequestConfig(sendAccountVerificationEmailRequest = sendAccountVerificationEmailRequest)

        return request<SendAccountVerificationEmailRequest, SendAccountVerificationEmailResult>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation sendAccountVerificationEmail
     *
     * @param sendAccountVerificationEmailRequest  (optional)
     * @return RequestConfig
     */
    fun sendAccountVerificationEmailRequestConfig(sendAccountVerificationEmailRequest: SendAccountVerificationEmailRequest?) : RequestConfig<SendAccountVerificationEmailRequest> {
        val localVariableBody = sendAccountVerificationEmailRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/SendAccountVerificationEmail",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Unlink Android Device ID
     * Unlinks the related Android device identifier from the user&#39;s AvatarYug account
     * @return UnlinkAndroidDeviceIDResult
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun unlinkAndroidDeviceID() : UnlinkAndroidDeviceIDResult {
        val localVarResponse = unlinkAndroidDeviceIDWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UnlinkAndroidDeviceIDResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Unlink Android Device ID
     * Unlinks the related Android device identifier from the user&#39;s AvatarYug account
     * @return ApiResponse<UnlinkAndroidDeviceIDResult?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun unlinkAndroidDeviceIDWithHttpInfo() : ApiResponse<UnlinkAndroidDeviceIDResult?> {
        val localVariableConfig = unlinkAndroidDeviceIDRequestConfig()

        return request<Unit, UnlinkAndroidDeviceIDResult>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation unlinkAndroidDeviceID
     *
     * @return RequestConfig
     */
    fun unlinkAndroidDeviceIDRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/UnlinkAndroidDeviceID",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Unlink Apple
     * Unlinks the related Apple account from the user&#39;s AvatarYug account.
     * @return UnlinkAppleResult
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun unlinkApple() : UnlinkAppleResult {
        val localVarResponse = unlinkAppleWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UnlinkAppleResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Unlink Apple
     * Unlinks the related Apple account from the user&#39;s AvatarYug account.
     * @return ApiResponse<UnlinkAppleResult?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun unlinkAppleWithHttpInfo() : ApiResponse<UnlinkAppleResult?> {
        val localVariableConfig = unlinkAppleRequestConfig()

        return request<Unit, UnlinkAppleResult>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation unlinkApple
     *
     * @return RequestConfig
     */
    fun unlinkAppleRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/UnlinkApple",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Unlink Custom ID
     * Unlinks the related custom identifier from the user&#39;s AvatarYug account
     * @return UnlinkCustomIDResult
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun unlinkCustomID() : UnlinkCustomIDResult {
        val localVarResponse = unlinkCustomIDWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UnlinkCustomIDResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Unlink Custom ID
     * Unlinks the related custom identifier from the user&#39;s AvatarYug account
     * @return ApiResponse<UnlinkCustomIDResult?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun unlinkCustomIDWithHttpInfo() : ApiResponse<UnlinkCustomIDResult?> {
        val localVariableConfig = unlinkCustomIDRequestConfig()

        return request<Unit, UnlinkCustomIDResult>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation unlinkCustomID
     *
     * @return RequestConfig
     */
    fun unlinkCustomIDRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/UnlinkCustomID",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Unlink Facebook Account
     * Unlinks the related Facebook account from the user&#39;s AvatarYug account
     * @return UnlinkFacebookAccountResult
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun unlinkFacebookAccount() : UnlinkFacebookAccountResult {
        val localVarResponse = unlinkFacebookAccountWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UnlinkFacebookAccountResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Unlink Facebook Account
     * Unlinks the related Facebook account from the user&#39;s AvatarYug account
     * @return ApiResponse<UnlinkFacebookAccountResult?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun unlinkFacebookAccountWithHttpInfo() : ApiResponse<UnlinkFacebookAccountResult?> {
        val localVariableConfig = unlinkFacebookAccountRequestConfig()

        return request<Unit, UnlinkFacebookAccountResult>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation unlinkFacebookAccount
     *
     * @return RequestConfig
     */
    fun unlinkFacebookAccountRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/UnlinkFacebookAccount",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Unlink Google Account
     * Unlinks the related Google account from the user&#39;s AvatarYug account
     * @return UnlinkGoogleAccountResult
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun unlinkGoogleAccount() : UnlinkGoogleAccountResult {
        val localVarResponse = unlinkGoogleAccountWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UnlinkGoogleAccountResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Unlink Google Account
     * Unlinks the related Google account from the user&#39;s AvatarYug account
     * @return ApiResponse<UnlinkGoogleAccountResult?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun unlinkGoogleAccountWithHttpInfo() : ApiResponse<UnlinkGoogleAccountResult?> {
        val localVariableConfig = unlinkGoogleAccountRequestConfig()

        return request<Unit, UnlinkGoogleAccountResult>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation unlinkGoogleAccount
     *
     * @return RequestConfig
     */
    fun unlinkGoogleAccountRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/UnlinkGoogleAccount",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Unlink IOS Device ID
     * Unlinks the related iOS device identifier from the user&#39;s AvatarYug account
     * @return UnlinkIOSDeviceIDResult
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun unlinkIOSDeviceID() : UnlinkIOSDeviceIDResult {
        val localVarResponse = unlinkIOSDeviceIDWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UnlinkIOSDeviceIDResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Unlink IOS Device ID
     * Unlinks the related iOS device identifier from the user&#39;s AvatarYug account
     * @return ApiResponse<UnlinkIOSDeviceIDResult?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun unlinkIOSDeviceIDWithHttpInfo() : ApiResponse<UnlinkIOSDeviceIDResult?> {
        val localVariableConfig = unlinkIOSDeviceIDRequestConfig()

        return request<Unit, UnlinkIOSDeviceIDResult>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation unlinkIOSDeviceID
     *
     * @return RequestConfig
     */
    fun unlinkIOSDeviceIDRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/UnlinkIOSDeviceID",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Update Default AvatarID
     * Sets the default avatar ID to users account
     * @param updateDefaultAvatarIDRequest  (optional)
     * @return UpdateDefaultAvatarIDResult
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updateDefaultAvatarID(updateDefaultAvatarIDRequest: UpdateDefaultAvatarIDRequest? = null) : UpdateDefaultAvatarIDResult {
        val localVarResponse = updateDefaultAvatarIDWithHttpInfo(updateDefaultAvatarIDRequest = updateDefaultAvatarIDRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UpdateDefaultAvatarIDResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update Default AvatarID
     * Sets the default avatar ID to users account
     * @param updateDefaultAvatarIDRequest  (optional)
     * @return ApiResponse<UpdateDefaultAvatarIDResult?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun updateDefaultAvatarIDWithHttpInfo(updateDefaultAvatarIDRequest: UpdateDefaultAvatarIDRequest?) : ApiResponse<UpdateDefaultAvatarIDResult?> {
        val localVariableConfig = updateDefaultAvatarIDRequestConfig(updateDefaultAvatarIDRequest = updateDefaultAvatarIDRequest)

        return request<UpdateDefaultAvatarIDRequest, UpdateDefaultAvatarIDResult>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateDefaultAvatarID
     *
     * @param updateDefaultAvatarIDRequest  (optional)
     * @return RequestConfig
     */
    fun updateDefaultAvatarIDRequestConfig(updateDefaultAvatarIDRequest: UpdateDefaultAvatarIDRequest?) : RequestConfig<UpdateDefaultAvatarIDRequest> {
        val localVariableBody = updateDefaultAvatarIDRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/UpdateDefaultAvatarID",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Update Email Password
     *
     * @param updateEmailPasswordRequest  (optional)
     * @return UpdateEmailPasswordResult
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updateEmailPassword(updateEmailPasswordRequest: UpdateEmailPasswordRequest? = null) : UpdateEmailPasswordResult {
        val localVarResponse = updateEmailPasswordWithHttpInfo(updateEmailPasswordRequest = updateEmailPasswordRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UpdateEmailPasswordResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update Email Password
     *
     * @param updateEmailPasswordRequest  (optional)
     * @return ApiResponse<UpdateEmailPasswordResult?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun updateEmailPasswordWithHttpInfo(updateEmailPasswordRequest: UpdateEmailPasswordRequest?) : ApiResponse<UpdateEmailPasswordResult?> {
        val localVariableConfig = updateEmailPasswordRequestConfig(updateEmailPasswordRequest = updateEmailPasswordRequest)

        return request<UpdateEmailPasswordRequest, UpdateEmailPasswordResult>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateEmailPassword
     *
     * @param updateEmailPasswordRequest  (optional)
     * @return RequestConfig
     */
    fun updateEmailPasswordRequestConfig(updateEmailPasswordRequest: UpdateEmailPasswordRequest?) : RequestConfig<UpdateEmailPasswordRequest> {
        val localVariableBody = updateEmailPasswordRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/UpdateEmailPassword",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Update User Demographics
     *
     * @param updateUserDemographicsRequest  (optional)
     * @return UpdateUserDemographicsResult
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updateUserDemographics(updateUserDemographicsRequest: UpdateUserDemographicsRequest? = null) : UpdateUserDemographicsResult {
        val localVarResponse = updateUserDemographicsWithHttpInfo(updateUserDemographicsRequest = updateUserDemographicsRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UpdateUserDemographicsResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update User Demographics
     *
     * @param updateUserDemographicsRequest  (optional)
     * @return ApiResponse<UpdateUserDemographicsResult?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun updateUserDemographicsWithHttpInfo(updateUserDemographicsRequest: UpdateUserDemographicsRequest?) : ApiResponse<UpdateUserDemographicsResult?> {
        val localVariableConfig = updateUserDemographicsRequestConfig(updateUserDemographicsRequest = updateUserDemographicsRequest)

        return request<UpdateUserDemographicsRequest, UpdateUserDemographicsResult>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateUserDemographics
     *
     * @param updateUserDemographicsRequest  (optional)
     * @return RequestConfig
     */
    fun updateUserDemographicsRequestConfig(updateUserDemographicsRequest: UpdateUserDemographicsRequest?) : RequestConfig<UpdateUserDemographicsRequest> {
        val localVariableBody = updateUserDemographicsRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/UpdateUserDemographics",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Update User Display Name
     * Updates the display name for the user in the project
     * @param updateUserProjectDisplayNameRequest  (optional)
     * @return UpdateUserProjectDisplayNameResult
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updateUserProjectDisplayName(updateUserProjectDisplayNameRequest: UpdateUserProjectDisplayNameRequest? = null) : UpdateUserProjectDisplayNameResult {
        val localVarResponse = updateUserProjectDisplayNameWithHttpInfo(updateUserProjectDisplayNameRequest = updateUserProjectDisplayNameRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UpdateUserProjectDisplayNameResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update User Display Name
     * Updates the display name for the user in the project
     * @param updateUserProjectDisplayNameRequest  (optional)
     * @return ApiResponse<UpdateUserProjectDisplayNameResult?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun updateUserProjectDisplayNameWithHttpInfo(updateUserProjectDisplayNameRequest: UpdateUserProjectDisplayNameRequest?) : ApiResponse<UpdateUserProjectDisplayNameResult?> {
        val localVariableConfig = updateUserProjectDisplayNameRequestConfig(updateUserProjectDisplayNameRequest = updateUserProjectDisplayNameRequest)

        return request<UpdateUserProjectDisplayNameRequest, UpdateUserProjectDisplayNameResult>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateUserProjectDisplayName
     *
     * @param updateUserProjectDisplayNameRequest  (optional)
     * @return RequestConfig
     */
    fun updateUserProjectDisplayNameRequestConfig(updateUserProjectDisplayNameRequest: UpdateUserProjectDisplayNameRequest?) : RequestConfig<UpdateUserProjectDisplayNameRequest> {
        val localVariableBody = updateUserProjectDisplayNameRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/UpdateUserProjectDisplayName",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Verify User With Email
     * Verifies user account status to email verified once email verification is dine
     * @param verifyUserWithEmailRequest  (optional)
     * @return VerifyUserWithEmailResult
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun verifyUserWithEmail(verifyUserWithEmailRequest: VerifyUserWithEmailRequest? = null) : VerifyUserWithEmailResult {
        val localVarResponse = verifyUserWithEmailWithHttpInfo(verifyUserWithEmailRequest = verifyUserWithEmailRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as VerifyUserWithEmailResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Verify User With Email
     * Verifies user account status to email verified once email verification is dine
     * @param verifyUserWithEmailRequest  (optional)
     * @return ApiResponse<VerifyUserWithEmailResult?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun verifyUserWithEmailWithHttpInfo(verifyUserWithEmailRequest: VerifyUserWithEmailRequest?) : ApiResponse<VerifyUserWithEmailResult?> {
        val localVariableConfig = verifyUserWithEmailRequestConfig(verifyUserWithEmailRequest = verifyUserWithEmailRequest)

        return request<VerifyUserWithEmailRequest, VerifyUserWithEmailResult>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation verifyUserWithEmail
     *
     * @param verifyUserWithEmailRequest  (optional)
     * @return RequestConfig
     */
    fun verifyUserWithEmailRequestConfig(verifyUserWithEmailRequest: VerifyUserWithEmailRequest?) : RequestConfig<VerifyUserWithEmailRequest> {
        val localVariableBody = verifyUserWithEmailRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/VerifyUserWithEmail",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
