/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

/**
 * Represents a collection of functions to interact with the API endpoints.
 */
package com.Avataryug.client.Apis

import Avataryug.Client.AvatarProjectSettings
import com.Avataryug.client.Infrastructure.ApiClient
import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import com.Avataryug.client.Models.GetAdPlacementByIDResult
import com.Avataryug.client.Models.GrantAdsRewardRequest
import com.Avataryug.client.Models.GrantAdsRewardResult
import com.Avataryug.client.Models.RecordAdsActivityRequest
import com.Avataryug.client.Models.RecordAdsActivityResult

import com.Avataryug.client.Infrastructure.ApiResponse
import com.Avataryug.client.Infrastructure.ClientException
import com.Avataryug.client.Infrastructure.ClientError
import com.Avataryug.client.Infrastructure.ServerException
import com.Avataryug.client.Infrastructure.ServerError
import com.Avataryug.client.Infrastructure.MultiValueMap
import com.Avataryug.client.Infrastructure.RequestConfig
import com.Avataryug.client.Infrastructure.RequestMethod
import com.Avataryug.client.Infrastructure.ResponseType
import com.Avataryug.client.Infrastructure.Success

class AdvertisingApi (basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            val id = AvatarProjectSettings.Project_Id
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://$id.avataryugapi.com/client")
        }
    }

    /**
     * Get Ad Placement By ID
     * Returns a list of ad placements by ID
     * @param placementID Unique identifier of the placement
     * @return GetAdPlacementByIDResult
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getAdPlacementByID(placementID: kotlin.String) : GetAdPlacementByIDResult {
        val localVarResponse = getAdPlacementByIDWithHttpInfo(placementID = placementID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetAdPlacementByIDResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Ad Placement By ID
     * Returns a list of ad placements by ID
     * @param placementID Unique identifier of the placement
     * @return ApiResponse<GetAdPlacementByIDResult?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getAdPlacementByIDWithHttpInfo(placementID: kotlin.String) : ApiResponse<GetAdPlacementByIDResult?> {
        val localVariableConfig = getAdPlacementByIDRequestConfig(placementID = placementID)

        return request<Unit, GetAdPlacementByIDResult>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getAdPlacementByID
     *
     * @param placementID Unique identifier of the placement
     * @return RequestConfig
     */
    fun getAdPlacementByIDRequestConfig(placementID: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("PlacementID", listOf(placementID.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/GetAdPlacementByID",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Grant Ads Reward
     * Grants ads rewards into user wallet (if currency) or inventory (if items)
     * @param grantAdsRewardRequest  (optional)
     * @return GrantAdsRewardResult
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun grantAdsReward(grantAdsRewardRequest: GrantAdsRewardRequest? = null) : GrantAdsRewardResult {
        val localVarResponse = grantAdsRewardWithHttpInfo(grantAdsRewardRequest = grantAdsRewardRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GrantAdsRewardResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Grant Ads Reward
     * Grants ads rewards into user wallet (if currency) or inventory (if items)
     * @param grantAdsRewardRequest  (optional)
     * @return ApiResponse<GrantAdsRewardResult?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun grantAdsRewardWithHttpInfo(grantAdsRewardRequest: GrantAdsRewardRequest?) : ApiResponse<GrantAdsRewardResult?> {
        val localVariableConfig = grantAdsRewardRequestConfig(grantAdsRewardRequest = grantAdsRewardRequest)

        return request<GrantAdsRewardRequest, GrantAdsRewardResult>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation grantAdsReward
     *
     * @param grantAdsRewardRequest  (optional)
     * @return RequestConfig
     */
    fun grantAdsRewardRequestConfig(grantAdsRewardRequest: GrantAdsRewardRequest?) : RequestConfig<GrantAdsRewardRequest> {
        val localVariableBody = grantAdsRewardRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/GrantAdsReward",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Record Ads Activity
     * Stores the Ads activity related data into our system for reporting
     * @param recordAdsActivityRequest  (optional)
     * @return RecordAdsActivityResult
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun recordAdsActivity(recordAdsActivityRequest: RecordAdsActivityRequest? = null) : RecordAdsActivityResult {
        val localVarResponse = recordAdsActivityWithHttpInfo(recordAdsActivityRequest = recordAdsActivityRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as RecordAdsActivityResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Record Ads Activity
     * Stores the Ads activity related data into our system for reporting
     * @param recordAdsActivityRequest  (optional)
     * @return ApiResponse<RecordAdsActivityResult?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun recordAdsActivityWithHttpInfo(recordAdsActivityRequest: RecordAdsActivityRequest?) : ApiResponse<RecordAdsActivityResult?> {
        val localVariableConfig = recordAdsActivityRequestConfig(recordAdsActivityRequest = recordAdsActivityRequest)

        return request<RecordAdsActivityRequest, RecordAdsActivityResult>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation recordAdsActivity
     *
     * @param recordAdsActivityRequest  (optional)
     * @return RequestConfig
     */
    fun recordAdsActivityRequestConfig(recordAdsActivityRequest: RecordAdsActivityRequest?) : RequestConfig<RecordAdsActivityRequest> {
        val localVariableBody = recordAdsActivityRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/RecordAdsActivity",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
